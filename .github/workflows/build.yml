name: Build

on:
  pull_request:
    branches:
      - '*'
      
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports: [ "5432:5432" ]

    env:
      RELEASE_COOKIE: ${{ secrets.RELEASE_COOKIE }}
      FLY_APP_NAME: ${{ secrets.FLY_APP_NAME }}
      SECRET_KEY_BASE: ${{ secrets.SECRET_KEY_BASE }}
      LIVE_BEATS_GITHUB_CLIENT_ID: ${{ secrets.LIVE_BEATS_GITHUB_CLIENT_ID }}
      LIVE_BEATS_GITHUB_CLIENT_SECRET: ${{ secrets.LIVE_BEATS_GITHUB_CLIENT_SECRET }}
      LIVE_BEATS_SERVER_IP: 127.0.0.1
      PHX_HOST: localhost
      PORT: 4000
      DATABASE_URL: postgres://postgres:postgres@localhost:5432/live_beats_test

    steps:
      # Setup
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Install Nix
        uses: cachix/install-nix-action@v20
        with:
          # Mostly to avoid GitHub rate limiting
          extra_nix_config: |
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}

      # FIXME: results in error: file 'nixpkgs' was not found in the Nix search path (add it using $NIX_PATH or -I)
      # - name: Print nixpkgs version
      #   run: nix-instantiate --eval -E '(import <nixpkgs> {}).lib.version'

      - name: Cache Nix derivations
        uses: cachix/cachix-action@v12
        with:
          name: garrettmichaelgeorge-public
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
          extraPullNames: nix-community

      # - name: Start Postgres container
      #   run: |
      #     nix develop --command docker run \
      #       --name live-beats-db \
      #       --publish 5432:5432 \
      #       --env POSTGRES_PASSWORD=postgres \
      #       --rm \
      #       --detach \
      #       postgres

      - name: Get GitHub services network name
        id: services-network
        run: |
          docker network ls --format {{.Name}} | grep github | xargs -I '<>' echo "name=<>" >> $GITHUB_OUTPUT

      # Build and test Mix release
      - name: Build and test
        run: nix flake check --keep-going --verbose --print-build-logs

      # Build and test Docker image
      - name: Build image
        run: nix build .#image --verbose --print-build-logs

      - name: Load image
        run: nix develop --command bash -c "zcat result | docker load"

      # NOTE: These would only work if Elixir is included in the Nix shell
      # - run: nix develop --command mix compile
      #   continue-on-error: true
      # TODO: bootstrap Postgres user & run DB migrations inside a proper script
      # and remove Mix dependency
      - run: MIX_ENV=prod nix develop --command mix local.rebar --force
      - run: MIX_ENV=prod nix develop --command mix local.hex --force
      - run: MIX_ENV=prod nix develop --command mix deps.get
      - run: MIX_ENV=prod nix develop --command mix ecto.create
      - run: MIX_ENV=prod nix develop --command mix ecto.migrate

      - name: Start app container
        run: |
          nix develop --command docker run \
            --rm \
            --name live-beats \
            --network ${{ steps.services-network.outputs.name }} \
            --env RELEASE_COOKIE=${{ secrets.RELEASE_COOKIE }} \
            --env FLY_APP_NAME=${{ secrets.FLY_APP_NAME }} \
            --env SECRET_KEY_BASE=${{ secrets.SECRET_KEY_BASE }} \
            --env LIVE_BEATS_GITHUB_CLIENT_ID=${{ secrets.LIVE_BEATS_GITHUB_CLIENT_ID }} \
            --env LIVE_BEATS_GITHUB_CLIENT_SECRET=${{ secrets.LIVE_BEATS_GITHUB_CLIENT_SECRET }} \
            --env LIVE_BEATS_SERVER_IP=127.0.0.1 \
            --env PHX_HOST=localhost \
            --env PORT=4000 \
            --env DATABASE_URL=ecto://postgres:postgres@live-beats-db:5432/live_beats_prod \
            --pull never \
            --tty \
            --interactive \
            --publish 4000:4000 \
            --detach \
          live-beats-nix

      # TODO: optimize image size
      # - name: Upload image as artifact
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: hello-image
      #     path: result
      #     if-no-files-found: error
      #     retention-days: 10


